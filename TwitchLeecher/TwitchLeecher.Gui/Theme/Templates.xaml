<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctrl="clr-namespace:TwitchLeecher.Gui.Controls"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Constants.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Tooltip -->
    <SolidColorBrush x:Key="ToolTip.Foreground" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="ToolTip.Background" Color="{StaticResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="ToolTip.Border" Color="{StaticResource ToolTip.Border.Color}" />

    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="FontSize" Value="{StaticResource Global.Font.Size}" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Foreground" Value="{StaticResource ToolTip.Foreground}" />
        <Setter Property="Background" Value="{StaticResource ToolTip.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource ToolTip.Border}" />
    </Style>
    <!-- /ToolTip -->

    <!-- ContentPresenter -->
    <Style TargetType="{x:Type ContentPresenter}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    </Style>
    <!-- /ContentPresenter -->

    <!-- ScrollBar -->
    <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="{StaticResource Scrollbar.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="{StaticResource Scrollbar.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="{StaticResource Global.Theme.Color}" />

    <Style x:Key="TlRepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TlScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TlScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="1,0" />
        <Setter Property="Width" Value="12" />
        <Setter Property="MinWidth" Value="12" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Track Margin="0,5,5,5" x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource TlRepeatButtonTransparent}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource TlRepeatButtonTransparent}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource TlScrollBarThumbVertical}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="12" />
                <Setter Property="MinHeight" Value="12" />
                <Setter Property="BorderThickness" Value="0,1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Track Margin="5,0,5,5" x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource TlRepeatButtonTransparent}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource TlRepeatButtonTransparent}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource TlScrollBarThumbHorizontal}" />
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /ScrollBar -->

    <!-- TextBlock -->
    <SolidColorBrush x:Key="TextBlock.Disabled.Foreground" Color="{StaticResource Text.Foreground.Light.Disabled.Color}" />

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextAlignment" Value="Justify" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource TextBlock.Disabled.Foreground}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /TextBlock -->

    <!-- Hyperlink -->
    <SolidColorBrush x:Key="Hyperlink.Foreground" Color="{StaticResource Hyperlink.Foreground.Color}" />

    <Style TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{StaticResource Hyperlink.Foreground}" />
    </Style>
    <!-- /Hyperlink -->

    <!-- Label -->
    <SolidColorBrush x:Key="Label.Disabled.Foreground" Color="{StaticResource Text.Foreground.Light.Disabled.Color}" />

    <Style TargetType="{x:Type Label}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Label.Disabled.Foreground}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /Label -->

    <!-- Button -->
    <SolidColorBrush x:Key="Button.Static.Foreground" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="Button.Static.Background" Color="{StaticResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="Button.Static.Border" Color="{StaticResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="{StaticResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="{StaticResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="{StaticResource Button.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="{StaticResource Button.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="{StaticResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="{StaticResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="{StaticResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="Button.FocusVisual.Border" Color="{StaticResource Button.FocusVisual.Border.Color}" />

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{StaticResource Button.FocusVisual.Border}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}">
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="30" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}" />
        <Setter Property="Foreground" Value="{StaticResource Button.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource Button.MouseOver.Background}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{StaticResource Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource Button.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{StaticResource Button.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource Button.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Border" Value="{StaticResource Button.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource Button.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /Button -->

    <!-- TextBox -->
    <SolidColorBrush x:Key="TextBox.Static.Foreground" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="{StaticResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="TextBox.Static.Border" Color="{StaticResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="TextBox.Disabled.Foreground" Color="{StaticResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="TextBox.Disabled.Background" Color="{StaticResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="TextBox.Disabled.Border" Color="{StaticResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="TextBox.Error.Background" Color="{StaticResource TextControl.Background.Error.Color}" />
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="{StaticResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="{StaticResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="TextBox.Inactive.Selection.Background" Color="{StaticResource TextBox.Background.Inactive.Selected.Color}" />

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="27" />
        <Setter Property="Padding" Value="3,0,3,0" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{StaticResource TextBox.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource TextBox.Disabled.Foreground}" />
                            <Setter Property="Background" Value="{StaticResource TextBox.Disabled.Background}" />
                            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <AdornedElementPlaceholder />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{StaticResource TextBox.Inactive.Selection.Background}" />
            </MultiTrigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="{StaticResource TextBox.Error.Background}" />
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- /TextBox -->

    <!-- WatermarkTextBox -->
    <SolidColorBrush x:Key="WatermarkTextBox.Static.Foreground" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Static.Background" Color="{StaticResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Static.Border" Color="{StaticResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Disabled.Foreground" Color="{StaticResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Disabled.Background" Color="{StaticResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Disabled.Border" Color="{StaticResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Error.Background" Color="{StaticResource TextControl.Background.Error.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.MouseOver.Border" Color="{StaticResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Focus.Border" Color="{StaticResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="WatermarkTextBox.Watermark.Foreground" Color="{StaticResource Text.Foreground.Watermark.Color}" />

    <Style TargetType="{x:Type xctk:WatermarkTextBox}">
        <Setter Property="Foreground" Value="{StaticResource WatermarkTextBox.Static.Foreground}" />
        <Setter Property="Background" Value="{StaticResource WatermarkTextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource WatermarkTextBox.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="3,0,3,0" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{StaticResource WatermarkTextBox.Watermark.Foreground}" Focusable="False" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:WatermarkTextBox}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <ContentPresenter x:Name="PART_WatermarkHost" Content="{TemplateBinding Watermark}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ContentPresenter.ContentTemplate>
                                        <Binding Path="WatermarkTemplate" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.TargetNullValue>
                                                <DataTemplate>
                                                    <ContentControl Content="{Binding}" Foreground="{StaticResource WatermarkTextBox.Watermark.Foreground}" Focusable="False" />
                                                </DataTemplate>
                                            </Binding.TargetNullValue>
                                        </Binding>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="KeepWatermarkOnGotFocus" Value="False" />
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="KeepWatermarkOnGotFocus" Value="True" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource TextBox.Disabled.Foreground}" />
                            <Setter Property="Background" Value="{StaticResource TextBox.Disabled.Background}" />
                            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /WatermarkTextBox -->

    <!-- IntegerLoopUpDown -->
    <SolidColorBrush x:Key="IntegerLoopUpDown.Static.Foreground" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="IntegerLoopUpDown.Static.Background" Color="{StaticResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="IntegerLoopUpDown.Static.Border" Color="{StaticResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="IntegerLoopUpDown.Disabled.Foreground" Color="{StaticResource Text.Foreground.Dark.Disabled.Color}" />
    <SolidColorBrush x:Key="IntegerLoopUpDown.Disabled.Background" Color="{StaticResource TextControl.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="IntegerLoopUpDown.Disabled.Border" Color="{StaticResource TextControl.Border.Disabled.Color}" />
    <SolidColorBrush x:Key="IntegerLoopUpDown.MouseOver.Border" Color="{StaticResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="IntegerLoopUpDown.Focus.Border" Color="{StaticResource TextControl.Border.Focus.Color}" />
    <SolidColorBrush x:Key="IntegerLoopUpDown.Watermark.Foreground" Color="{StaticResource Text.Foreground.Watermark.Color}" />

    <Style TargetType="{x:Type ctrl:IntegerLoopUpDown}">
        <Setter Property="Foreground" Value="{StaticResource IntegerLoopUpDown.Static.Foreground}" />
        <Setter Property="Background" Value="{StaticResource IntegerLoopUpDown.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource IntegerLoopUpDown.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{StaticResource IntegerLoopUpDown.Watermark.Foreground}" Focusable="False" Margin="0,0,3,0" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:IntegerLoopUpDown}">
                    <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ButtonSpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" IsTabStop="False" ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="Stretch">
                        <xctk:WatermarkTextBox x:Name="PART_TextBox" AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}" AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}" AcceptsReturn="False" BorderThickness="0" Background="Transparent" ContextMenu="{TemplateBinding ContextMenu}" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="{TemplateBinding IsTabStop}" IsUndoEnabled="True" MinWidth="20" Padding="{TemplateBinding Padding}" SelectAllOnGotFocus="{Binding SelectAllOnGotFocus, RelativeSource={RelativeSource TemplatedParent}}" TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="NoWrap" TabIndex="{TemplateBinding TabIndex}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}" />
                    </xctk:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource IntegerLoopUpDown.Disabled.Foreground}" />
                            <Setter Property="Background" Value="{StaticResource IntegerLoopUpDown.Disabled.Background}" />
                            <Setter Property="BorderBrush" Value="{StaticResource IntegerLoopUpDown.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource IntegerLoopUpDown.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource IntegerLoopUpDown.Focus.Border}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /IntegerLoopUpDown -->

    <!-- CheckBox -->
    <SolidColorBrush x:Key="OptionMark.Static.Foreground" Color="{StaticResource Text.Foreground.Light.Color}" />
    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="{StaticResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="{StaticResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="{StaticResource TextControl.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="{StaticResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="{StaticResource TextControl.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="{StaticResource TextControl.Border.Pressed.Color}" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="{StaticResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="{StaticResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="{StaticResource Text.Foreground.Dark.Disabled.Color}" />

    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="-2" SnapsToDevicePixels="true" Stroke="{StaticResource OptionMark.Static.Foreground}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxOptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="-2" SnapsToDevicePixels="true" Stroke="{StaticResource OptionMark.Static.Foreground}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxFocusVisual}" />
        <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
        <Setter Property="Foreground" Value="{StaticResource OptionMark.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None" />
                                <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxOptionMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /CheckBox -->

    <!-- RadioButton -->
    <SolidColorBrush x:Key="RadioButton.Static.Foreground" Color="{StaticResource Text.Foreground.Light.Color}" />
    <SolidColorBrush x:Key="RadioButton.Static.Background" Color="{StaticResource TextControl.Background.Color}" />
    <SolidColorBrush x:Key="RadioButton.Static.Border" Color="{StaticResource TextControl.Border.Color}" />
    <SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="{StaticResource TextControl.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="{StaticResource TextControl.Border.MouseOver.Color}" />
    <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="{StaticResource TextControl.Background.Pressed.Color}" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="{StaticResource TextControl.Border.Pressed.Color}" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="{StaticResource Text.Foreground.Dark.Color}" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="{StaticResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="{StaticResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="{StaticResource Text.Foreground.Dark.Disabled.Color}" />

    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="-2" SnapsToDevicePixels="true" Stroke="{StaticResource RadioButton.Static.Foreground}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioButtonOptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="-2" SnapsToDevicePixels="true" Stroke="{StaticResource RadioButton.Static.Foreground}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource RadioButtonFocusVisual}" />
        <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}" />
        <Setter Property="Foreground" Value="{StaticResource RadioButton.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{StaticResource RadioButton.Static.Glyph}" MinWidth="6" MinHeight="6" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource RadioButtonOptionMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /RadioButton -->

    <!-- ProgressBar -->
    <SolidColorBrush x:Key="ProgressBar.Progress" Color="{StaticResource ProgressBar.Progress.Color}" />
    <SolidColorBrush x:Key="ProgressBar.Background" Color="{StaticResource ProgressBar.Background.Color}" />
    <SolidColorBrush x:Key="ProgressBar.Border" Color="{StaticResource TextControl.Border.Color}" />

    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}" />
        <Setter Property="Background" Value="{StaticResource ProgressBar.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track" />
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /ProgressBar -->

    <!-- TabItem -->
    <SolidColorBrush x:Key="TabItem.Static.Foreground" Color="{StaticResource Text.Foreground.Light.Color}" />
    <SolidColorBrush x:Key="TabItem.Static.Background" Color="{StaticResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="TabItem.Static.Border" Color="{StaticResource Global.Theme.Color}" />
    <SolidColorBrush x:Key="TabItem.MouseOver.Background" Color="{StaticResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="{StaticResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="{StaticResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="{StaticResource Button.Background.Disabled.Color}" />
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="{StaticResource Button.Background.MouseOver.Color}" />
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="{StaticResource Button.Background.MouseOver.Color}" />

    <Style x:Key="TabItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{StaticResource TabItem.Static.Foreground}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}" />
        <Setter Property="Foreground" Value="{StaticResource TabItem.Static.Foreground}" />
        <Setter Property="Background" Value="{StaticResource TabItem.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}" />
        <Setter Property="Padding" Value="10,4,10,4" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="mainBorder" SnapsToDevicePixels="True" CornerRadius="3,3,0,0" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Margin="0,0,1,0" VerticalAlignment="Bottom">
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true">
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="3,3,3,0" />
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Selected.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Selected.Border}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /TabItem -->

    <!-- TabControl -->
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{StaticResource TabItem.Static.Foreground}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
                        <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- /TabControl -->
</ResourceDictionary>